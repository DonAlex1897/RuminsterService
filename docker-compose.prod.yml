version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: ruminster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ruminster
      POSTGRES_USER: ruminster_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - ruminster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ruminster_user -d ruminster"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ruminster-app
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ruminster;Username=ruminster_user;Password=${POSTGRES_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - EmailSettings__SmtpHost=${SMTP_HOST}
      - EmailSettings__SmtpPort=${SMTP_PORT}
      - EmailSettings__Username=${SMTP_USERNAME}
      - EmailSettings__Password=${SMTP_PASSWORD}
      - EmailSettings__FromEmail=${FROM_EMAIL}
      - EmailSettings__FromName=${FROM_NAME}
      - EmailSettings__BaseUrl=${BASE_URL}
    ports:
      - "5000:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ruminster-network
    volumes:
      - app_logs:/app/logs

volumes:
  postgres_data:
  app_logs:

networks:
  ruminster-network:
    driver: bridge
